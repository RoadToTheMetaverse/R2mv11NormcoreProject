using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace UnityEngine.XR.Interaction.Toolkit.Examples
{
    [RealtimeModel]
    public partial class NormcoreLiftHeightModel
    {
        [RealtimeProperty(1, true, true)] 
        private float _height;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace UnityEngine.XR.Interaction.Toolkit.Examples {
    public partial class NormcoreLiftHeightModel : RealtimeModel {
        public float height {
            get {
                return _heightProperty.value;
            }
            set {
                if (_heightProperty.value == value) return;
                _heightProperty.value = value;
                InvalidateReliableLength();
                FireHeightDidChange(value);
            }
        }
        
        public delegate void PropertyChangedHandler<in T>(NormcoreLiftHeightModel model, T value);
        public event PropertyChangedHandler<float> heightDidChange;
        
        public enum PropertyID : uint {
            Height = 1,
        }
        
        #region Properties
        
        private ReliableProperty<float> _heightProperty;
        
        #endregion
        
        public NormcoreLiftHeightModel() : base(null) {
            _heightProperty = new ReliableProperty<float>(1, _height);
        }
        
        protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
            _heightProperty.UnsubscribeCallback();
        }
        
        private void FireHeightDidChange(float value) {
            try {
                heightDidChange?.Invoke(this, value);
            } catch (System.Exception exception) {
                UnityEngine.Debug.LogException(exception);
            }
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _heightProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _heightProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.Height: {
                        changed = _heightProperty.Read(stream, context);
                        if (changed) FireHeightDidChange(height);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _height = height;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */
